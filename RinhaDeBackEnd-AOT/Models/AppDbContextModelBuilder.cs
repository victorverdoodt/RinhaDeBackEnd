// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace RinhaDeBackEnd_AOT.Models
{
    public partial class AppDbContextModel
    {
        partial void Initialize()
        {
            var customer = CustomerEntityType.Create(this);

            CustomerEntityType.CreateAnnotations(customer);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.2");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var customer = FindEntityType("RinhaDeBackEnd_AOT.Infra.Entities.Customer")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            customer.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var rinhaDeBackEnd_AOTInfraEntitiesCustomerTableBase = new TableBase("RinhaDeBackEnd_AOT.Infra.Entities.Customer", null, relationalModel);
            var balanceColumnBase = new ColumnBase<ColumnMappingBase>("Balance", "integer", rinhaDeBackEnd_AOTInfraEntitiesCustomerTableBase);
            rinhaDeBackEnd_AOTInfraEntitiesCustomerTableBase.Columns.Add("Balance", balanceColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "integer", rinhaDeBackEnd_AOTInfraEntitiesCustomerTableBase);
            rinhaDeBackEnd_AOTInfraEntitiesCustomerTableBase.Columns.Add("Id", idColumnBase);
            var lastStatementColumnBase = new ColumnBase<ColumnMappingBase>("LastStatement", "text", rinhaDeBackEnd_AOTInfraEntitiesCustomerTableBase)
            {
                IsNullable = true
            };
            rinhaDeBackEnd_AOTInfraEntitiesCustomerTableBase.Columns.Add("LastStatement", lastStatementColumnBase);
            var limitColumnBase = new ColumnBase<ColumnMappingBase>("Limit", "integer", rinhaDeBackEnd_AOTInfraEntitiesCustomerTableBase);
            rinhaDeBackEnd_AOTInfraEntitiesCustomerTableBase.Columns.Add("Limit", limitColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "text", rinhaDeBackEnd_AOTInfraEntitiesCustomerTableBase);
            rinhaDeBackEnd_AOTInfraEntitiesCustomerTableBase.Columns.Add("Name", nameColumnBase);
            relationalModel.DefaultTables.Add("RinhaDeBackEnd_AOT.Infra.Entities.Customer", rinhaDeBackEnd_AOTInfraEntitiesCustomerTableBase);
            var rinhaDeBackEnd_AOTInfraEntitiesCustomerMappingBase = new TableMappingBase<ColumnMappingBase>(customer, rinhaDeBackEnd_AOTInfraEntitiesCustomerTableBase, true);
            rinhaDeBackEnd_AOTInfraEntitiesCustomerTableBase.AddTypeMapping(rinhaDeBackEnd_AOTInfraEntitiesCustomerMappingBase, false);
            defaultTableMappings.Add(rinhaDeBackEnd_AOTInfraEntitiesCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, customer.FindProperty("Id")!, rinhaDeBackEnd_AOTInfraEntitiesCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)balanceColumnBase, customer.FindProperty("Balance")!, rinhaDeBackEnd_AOTInfraEntitiesCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastStatementColumnBase, customer.FindProperty("LastStatement")!, rinhaDeBackEnd_AOTInfraEntitiesCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)limitColumnBase, customer.FindProperty("Limit")!, rinhaDeBackEnd_AOTInfraEntitiesCustomerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, customer.FindProperty("Name")!, rinhaDeBackEnd_AOTInfraEntitiesCustomerMappingBase);

            var tableMappings = new List<TableMapping>();
            customer.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var customersTable = new Table("Customers", null, relationalModel);
            var idColumn = new Column("Id", "integer", customersTable);
            customersTable.Columns.Add("Id", idColumn);
            idColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var balanceColumn = new Column("Balance", "integer", customersTable);
            customersTable.Columns.Add("Balance", balanceColumn);
            var lastStatementColumn = new Column("LastStatement", "text", customersTable)
            {
                IsNullable = true
            };
            customersTable.Columns.Add("LastStatement", lastStatementColumn);
            var limitColumn = new Column("Limit", "integer", customersTable);
            customersTable.Columns.Add("Limit", limitColumn);
            var nameColumn = new Column("Name", "text", customersTable);
            customersTable.Columns.Add("Name", nameColumn);
            var pK_Customers = new UniqueConstraint("PK_Customers", customersTable, new[] { idColumn });
            customersTable.PrimaryKey = pK_Customers;
            var pK_CustomersUc = RelationalModel.GetKey(this,
                "RinhaDeBackEnd_AOT.Infra.Entities.Customer",
                new[] { "Id" });
            pK_Customers.MappedKeys.Add(pK_CustomersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CustomersUc).Add(pK_Customers);
            customersTable.UniqueConstraints.Add("PK_Customers", pK_Customers);
            relationalModel.Tables.Add(("Customers", null), customersTable);
            var customersTableMapping = new TableMapping(customer, customersTable, true);
            customersTable.AddTypeMapping(customersTableMapping, false);
            tableMappings.Add(customersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, customer.FindProperty("Id")!, customersTableMapping);
            RelationalModel.CreateColumnMapping(balanceColumn, customer.FindProperty("Balance")!, customersTableMapping);
            RelationalModel.CreateColumnMapping(lastStatementColumn, customer.FindProperty("LastStatement")!, customersTableMapping);
            RelationalModel.CreateColumnMapping(limitColumn, customer.FindProperty("Limit")!, customersTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, customer.FindProperty("Name")!, customersTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
